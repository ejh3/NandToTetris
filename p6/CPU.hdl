// File: projects/p6/CPU.hdl
// This file is part of the CSE 390B
// project series, adapted from the
// Nand2Tetris project.

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {


    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).


    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction


    PARTS:
    
    //ALU Y: A or M
    Mux16(a=areg, b=inM, sel=instruction[12], out=aluy);

    // What to put in A Register
    Mux16(a=instruction, b=aluout, sel=instruction[15], out=arin);
    LoadAReg(instruction=instruction, out=loada);
    ARegister(in=arin, load=loada, out[0..14]=addressM, out=areg);
    
    LoadDReg(instruction=instruction, out=loadd);
    DRegister(in=aluout, load=loadd, out=dreg);

    ALU(x=dreg, y=aluy, zx=instruction[11], nx=instruction[10], zy=instruction[9],
        ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, 
        out=aluout, zr=zr, ng=ng);

    // Write to M iff we have a C instruction with target M
    And(a=instruction[15], b=instruction[3], out=writeM);

    JumpLogic(instruction=instruction, aluzr=zr, alung=ng, load=loadpc, inc=incpc);
    PC(in=areg, load=loadpc, inc=incpc, reset=reset, out[0..14]=pc);
}
